---
import { buttonVariants } from './button/button';

interface Props {
  id: string;
  title: string;
  description?: string;
  closeOnOutsideClick?: boolean;
}

const { id, title, description, closeOnOutsideClick = true } = Astro.props;
---

<dialog
  id={id}
  class="hidden fixed inset-0 z-50 items-center justify-center p-4 bg-background/90 backdrop-blur-sm container"
>
  <div
    class="relative w-full max-w-md rounded-lg shadow-lg bg-background/80 border-2 border-muted"
    role="dialog"
    aria-labelledby={`${id}-title`}
    aria-describedby={`${id}-description`}
  >
    <div class="p-6">
      <h2 id={`${id}-title`} class="text-lg font-semibold text-gray-900 dark:text-white">
        {title}
      </h2>
      {description && (
        <p id={`${id}-description`} class="mt-2 text-sm text-gray-500 dark:text-gray-400">
          {description}
        </p>
      )}
      <div class="mt-4">
        <slot />
      </div>
    </div>
    <button
      type="button"
      class:list={[buttonVariants({ variant: "icon-ghost" }), "absolute top-2 right-2 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800"]}  
      aria-label="Close"
    >
      <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>
</dialog>

<script define:vars={{ id, closeOnOutsideClick }}>
  // Function to set up the dialog
  function setupDialog() {
    const dialog = document.getElementById(id);

    function openDialog() {
      dialog.classList.remove('hidden');
      dialog.classList.add('flex');
      document.body.classList.add('overflow-hidden');
    }

    function closeDialog() {
      dialog.classList.add('hidden');
      dialog.classList.remove('flex');
      dialog.close();
      document.body.classList.remove('overflow-hidden');
    }

    // Add event listener for close button
    const closeButton = dialog.querySelector('button[aria-label="Close"]');
    closeButton.addEventListener('click', closeDialog);

    // Add event listener for outside click if enabled
    if (closeOnOutsideClick) {
      dialog.addEventListener('click', (event) => {
        if (event.target === dialog) {
          closeDialog();
        }
      });
    }

    // Add event listener for ESC key
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && !dialog.classList.contains('hidden')) {
        closeDialog();
      }
    });

    // Create or update the global object
    window[`${id}Dialog`] = { open: openDialog, close: closeDialog };
  }

  // Run setup immediately
  setupDialog();

  // Also run setup on page load for SPA navigation
  document.addEventListener('astro:page-load', setupDialog);
</script>

<!-- 
  <Dialog id="dialog2" title="Second Dialog" description="This is the second example dialog.">
    <p>Content for the second dialog goes here.</p>
    <div class="flex justify-end">
      <button class:list={[buttonVariants({ variant: "default" }), "mt-4"]}>
        Action Button 2
      </button>
    </div>
  </Dialog>

  <button class:list={[buttonVariants({ variant: "default" }), "mt-4"]} onclick="dialog1Dialog.open()">Open Dialog 1</button>
-->