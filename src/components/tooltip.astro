---
interface Props {
  content: string;
  position?: 'top' | 'right' | 'bottom' | 'left';
}

const { content, position = 'top' } = Astro.props;
---

<div class="tooltip-wrapper relative inline-block" data-position={position}>
  <slot />
  <div class="tooltip opacity-0 invisible absolute z-10 px-3 py-2 text-sm font-medium text-white bg-gray-900 rounded-md shadow-sm transition-opacity duration-300">
    {content}
  </div>
</div>

<script>
  function setupTooltips() {
    const wrappers = document.querySelectorAll('.tooltip-wrapper');
    wrappers.forEach(wrapper => {
      const tooltip = wrapper.querySelector('.tooltip')!;
      const trigger = wrapper.firstElementChild;
      
      if (!tooltip || !trigger) return;

      const position = wrapper.getAttribute('data-position') || 'top';

      function showTooltip() {
        tooltip.classList.remove('opacity-0', 'invisible');
        positionTooltip();
      }

      function hideTooltip() {
        tooltip.classList.add('opacity-0', 'invisible');
      }

      function positionTooltip() {
        const triggerRect = trigger!.getBoundingClientRect();
        const tooltipRect = tooltip.getBoundingClientRect();

        let top, left;

        switch (position) {
          case 'top':
            top = -tooltipRect.height - 8;
            left = (triggerRect.width - tooltipRect.width) / 2;
            break;
          case 'right':
            top = (triggerRect.height - tooltipRect.height) / 2;
            left = triggerRect.width + 8;
            break;
          case 'bottom':
            top = triggerRect.height + 8;
            left = (triggerRect.width - tooltipRect.width) / 2;
            break;
          case 'left':
            top = (triggerRect.height - tooltipRect.height) / 2;
            left = -tooltipRect.width - 8;
            break;
        }

        (tooltip as HTMLElement).style.top = `${top}px`;
        (tooltip as HTMLElement).style.left = `${left}px`;
      }

      trigger.addEventListener('mouseenter', showTooltip);
      trigger.addEventListener('mouseleave', hideTooltip);
    });
  }

  // Run on initial load
  setupTooltips();

  // Re-run on Astro page changes
  document.addEventListener('astro:after-swap', setupTooltips);
</script>

<style>
  .tooltip {
    transition: opacity 0.3s, visibility 0.3s;
  }
</style>

<style is:global>
  .tooltip-wrapper {
    position: relative;
  }
  .tooltip {
    white-space: nowrap;
  }
</style>


<!-- 
<Tooltip content="This is a left tooltip" position="left">
  <button class="px-4 py-2 bg-purple-500 text-white rounded">Hover me (Left)</button>
</Tooltip>
-->