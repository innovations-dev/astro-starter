---
import type { HTMLAttributes } from "astro/types";
import SelectTrigger from "./select-trigger.astro";
import SelectValue from "./select-value.astro";
import SelectContent from "./select-content.astro";
import SelectGroup from "./select-group.astro";
import SelectItem from "./select-item.astro";

interface Option {
  value: string;
  label: string;
}

interface OptionGroup {
  label: string;
  options: Option[];
}

interface Props extends HTMLAttributes<"div"> {
  options: (Option | OptionGroup)[];
  defaultValue?: string;
  name: string;
  placeholder?: string;
}

const { options, defaultValue, name, placeholder = "Select an option", class: className, ...rest } = Astro.props;

const id = `select-${name}`;

const isOptionGroup = (item: Option | OptionGroup): item is OptionGroup => {
  return "options" in item;
};
---

<div class:list={["relative inline-block w-full", className]} {...rest} data-select>
  <SelectTrigger id={id} aria-haspopup="listbox" aria-expanded="false" data-select-trigger>
    <SelectValue>{placeholder}</SelectValue>
  </SelectTrigger>
  <SelectContent>
    {
      options.map((item, groupIndex) =>
        isOptionGroup(item) ? (
          <SelectGroup label={item.label}>
            {item.options.map((option, index) => (
              <SelectItem
                value={option.value}
                role="option"
                id={`${id}-option-${groupIndex}-${index}`}
                aria-selected={option.value === defaultValue ? "true" : "false"}
                tabindex="0"
              >
                {option.label}
              </SelectItem>
            ))}
          </SelectGroup>
        ) : (
          <SelectItem
            value={item.value}
            role="option"
            id={`${id}-option-${groupIndex}`}
            aria-selected={item.value === defaultValue ? "true" : "false"}
            tabindex="0"
          >
            {item.label}
          </SelectItem>
        )
      )
    }
  </SelectContent>
  <select id={`${id}-native`} name={name} class="sr-only" data-select-native>
    <option value="" disabled selected={!defaultValue}>{placeholder}</option>
    {
      options.map((item) =>
        isOptionGroup(item) ? (
          <optgroup label={item.label}>
            {item.options.map((option) => (
              <option value={option.value} selected={option.value === defaultValue}>
                {option.label}
              </option>
            ))}
          </optgroup>
        ) : (
          <option value={item.value} selected={item.value === defaultValue}>
            {item.label}
          </option>
        )
      )
    }
  </select>
</div>

<script>
  const selects = document.querySelectorAll("[data-select]");
  selects.forEach((select) => {
    const trigger = select.querySelector("[data-select-trigger]");
    const content = select.querySelector("[data-select-content]");
    const items = select.querySelectorAll("[data-select-item]");
    const nativeSelect = select.querySelector("[data-select-native]");

    trigger?.addEventListener("click", () => {
      const expanded = trigger.getAttribute("aria-expanded") === "true";
      trigger.setAttribute("aria-expanded", (!expanded).toString());
      content?.classList.toggle("hidden");
    });

    items.forEach((item) => {
      item.addEventListener("click", () => {
        const value = item.getAttribute("data-value");
        const label = item.textContent;
        if (nativeSelect instanceof HTMLSelectElement) {
          nativeSelect.value = value || "";
        }
        const selectValue = select.querySelector("[data-select-value]");
        if (selectValue) {
          selectValue.textContent = label;
        }
        content?.classList.add("hidden");
        trigger?.setAttribute("aria-expanded", "false");

        // Update aria-selected for all items
        items.forEach((i) => i.setAttribute("aria-selected", "false"));
        item.setAttribute("aria-selected", "true");
      });

      // Add keyboard navigation
      (item as HTMLElement).addEventListener("keydown", (e: KeyboardEvent) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          (item as HTMLElement).click();
        }
      });
    });

    // Close the select when clicking outside
    document.addEventListener("click", (event) => {
      if (!select.contains(event.target as Node)) {
        content?.classList.add("hidden");
        trigger?.setAttribute("aria-expanded", "false");
      }
    });

    // Add keyboard navigation for the trigger
    (trigger as HTMLButtonElement)?.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " " || e.key === "ArrowDown" || e.key === "ArrowUp") {
        e.preventDefault();
        (trigger as HTMLButtonElement).click();
        if (e.key === "ArrowDown" || e.key === "ArrowUp") {
          const firstItem = items[0] as HTMLElement;
          firstItem?.focus();
        }
      }
    });
  });
</script>
