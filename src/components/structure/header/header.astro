---
import type { HTMLAttributes } from "astro/types";
import { headerVariants, type HeaderProps } from "./header";
import type { VariantProps } from "class-variance-authority";
import type { Brand } from "@/schema/brand";
import type { Link } from "@/schema/link";

import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";

import { buttonVariants } from "../../button/button";
import ThemeSwitch from "../../theme/theme-switch.astro";
import DropdownMenu from "../../dropdown-menu.astro";
import links from "@/data/header.json";
import actions from "@/data/auth.json";

interface Props extends VariantProps<typeof headerVariants>, HTMLAttributes<"header"> {}

// get the current path
const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.length > 1 ? pathname.slice(1) : pathname; // remove the first "/"

// get the brand
const brand: Brand[] = await getCollection("brand");

const _links = links.map((link) => {
  if (link.subs) {
    return {
      ...link,
      isActive: link.subs.some((sub) => sub.href === currentPath)
    };
  }
  return {
    ...link,
    isActive: link.href === currentPath
  };
});
const { title, class: className, variant, ...props } = Astro.props;
---

<header
  class:list={[
    headerVariants({ variant }),
    "transition-transform duration-300 ease-in-cubic-gs",
    "[data-state=hidden]:translate-y-[-100%] data-state=visible]:translate-y-0",
    "border-3 [data-state=hidden]:border-red-500 [data-state=show]:border-blue-500",
    className
  ]}
  data-state="visible"
  {...props}
>
  <div class="mx-auto flex flex-wrap items-center justify-between">
    <slot name="page-header-brand">
      <a href={brand[0].data.url} class="flex items-center">
        {brand[0].data.icon ? <Icon name={brand[0].data.icon} class="mr-3 h-10 w-10" /> : null}
        <span class="self-center whitespace-nowrap text-xl font-semibold">{brand[0].data.name}</span>
      </a>
    </slot>
    <div class="flex items-center gap-2 lg:order-2">
      <slot name="page-header-actions">
        {
          actions.length
            ? actions.map((action: Link) => {
                return (
                  <a
                    href={action.href}
                    class:list={[
                      buttonVariants({ variant: "ghost" }),
                      "inline-flex rounded text-sm dark:hover:text-black"
                    ]}
                  >
                    {action.name}
                  </a>
                );
              })
            : null
        }
        <!-- <DarkModeSwitch /> -->
        <ThemeSwitch />
      </slot>
      <slot name="page-header-mobile-menu">
        <button
          id="mobile-menu-toggle"
          type="button"
          class:list={[buttonVariants({ variant: "ghost" }), "inline-flex rounded hover:text-background lg:hidden"]}
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"
            ><path
              fill-rule="evenodd"
              d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
              clip-rule="evenodd"></path></svg
          >
          <svg class="hidden h-6 w-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"
            ><path
              fill-rule="evenodd"
              d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
              clip-rule="evenodd"></path></svg
          >
        </button>
      </slot>
    </div>
    <nav
      id="mobile-menu"
      class:list={[
        "hidden w-full items-center justify-between lg:order-1 lg:flex lg:w-auto",
        "lg:static lg:bg-transparent",
        "absolute left-0 right-0 top-full z-50 bg-background"
      ]}
    >
      <slot>
        <ul class="mt-4 flex flex-col font-medium lg:mt-0 lg:flex-row lg:gap-x-4">
          {
            _links.length
              ? _links.map((link) => {
                  const linkStyles = [
                    "text-sm text-foreground/60 py-1 px-2 border-2 border-transparent rounded-md",
                    {
                      "bg-foreground/10 text-background text-underline px-2 rounded-md cursor-auto": link.isActive
                    },
                    {
                      "hover:border-foreground/50 hover:border-2 hover:text-foreground hover:cursor-pointer":
                        !link.isActive
                    }
                  ];
                  if (link.subs) {
                    return (
                      <li class:list={["mt-2 text-sm", ...linkStyles]}>
                        <DropdownMenu trigger={link.name} items={link.subs} variant="unstyled" />
                      </li>
                    );
                  }
                  return (
                    <li class:list={linkStyles}>
                      <a
                        href={link.href}
                        class:list={[
                          "block rounded border-b border-gray-100 py-2 text-sm lg:border-0 dark:border-gray-700"
                        ]}
                        aria-current={link.isActive ? "page" : undefined}
                      >
                        {link.name}
                      </a>
                    </li>
                  );
                })
              : null
          }
        </ul>
      </slot>
    </nav>
  </div>
</header>

<div id="mobile-menu-overlay" class="fixed inset-0 z-40 hidden bg-black bg-opacity-50"></div>

<script>
  function toggleMobileMenu() {
    const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
    const mobileMenu = document.getElementById("mobile-menu");
    const menuIcons = mobileMenuToggle?.querySelectorAll("svg");
    const mobileMenuOverlay = document.getElementById("mobile-menu-overlay");

    mobileMenu?.classList.toggle("hidden");
    mobileMenuOverlay?.classList.toggle("hidden");
    menuIcons?.forEach((icon) => icon.classList.toggle("hidden"));

    const isExpanded = mobileMenuToggle?.getAttribute("aria-expanded") === "true";
    mobileMenuToggle?.setAttribute("aria-expanded", (!isExpanded).toString());
  }

  function setupMobileMenu() {
    const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
    const mobileMenuOverlay = document.getElementById("mobile-menu-overlay");

    mobileMenuToggle?.addEventListener("click", toggleMobileMenu);
    mobileMenuOverlay?.addEventListener("click", toggleMobileMenu);
  }

  // For Astro's view transitions
  document.addEventListener("astro:page-load", setupMobileMenu);

  // Fallback for non-Astro navigation or initial page load
  document.addEventListener("DOMContentLoaded", () => {
    if (!document.body.hasAttribute("data-astro-transition")) {
      setupMobileMenu();
    }
  });

  let lastScrollY = window.scrollY;

  function handleScroll() {
    const header = document.querySelector(".header");
    if (!header) return;

    const currentScrollY = window.scrollY;

    if (currentScrollY > lastScrollY) {
      // Scrolling down
      // header.classList.toggle("hidden");
      (header as HTMLElement).dataset.state = "hidden";
      // (header as HTMLElement).style.transform = "translateY(-115%)";
    } else {
      // Scrolling up
      // header.classList.toggle("hidden");
      (header as HTMLElement).dataset.state = "show";
      // (header as HTMLElement).style.transform = "translateY(0)";
    }

    lastScrollY = currentScrollY;
  }

  window.addEventListener("scroll", handleScroll);
</script>
