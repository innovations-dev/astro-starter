---
import { cva } from "class-variance-authority";
import { buttonVariants } from "../button/button";
import { heroVariants } from "./hero";
import type { HTMLAttributes } from "astro/types";
import type { ButtonProps } from "../button/button";

type CTA = {
  name: string;
  href: string;
  variant?: ButtonProps["variant"];
};

interface Props extends HTMLAttributes<"div"> {
  lede: {
    title: string;
    link: {
      name: string;
      href: string;
    };
  };
  description: string;
  cta: CTA | CTA[];
  bg?:
    | {
        startColor: string;
        endColor: string;
      }
    | string;
}

const { lede, title, description, cta, bg }: Props = Astro.props;

const background = typeof bg === "string" ? bg : "";
const style = typeof bg === "object" ? `
  clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%);
  --start-color: ${bg.startColor};
  --end-color: ${bg.endColor};
` : "";
---

<section class:list={[background]}>
  <div class:list={[heroVariants({variant: "featured"}), "mx-auto max-w-2xl"]}>
    <div class="mx-auto max-w-2xl py-32 sm:py-48 lg:py-56">
      <slot name="lede">
        <div class="hidden sm:mb-8 sm:flex sm:justify-center">
          <div
            class="relative rounded-full px-3 py-1 text-sm leading-6 text-foreground border-2 border:hover:border-border/20"
          >
            {lede.title}
            <a
              href={lede.link.href}
              class="font-semibold text-indigo-600"
            ><span class="absolute inset-0" aria-hidden="true"></span>{lede.link.name} <span aria-hidden="true">&rarr;</span></a
            >
          </div>
        </div>
      </slot>
      <div class="text-center">
        <h1
          class="text-4xl font-bold tracking-tight text-foreground sm:text-6xl"
        >
          {title}
        </h1>
        <p class="mt-6 text-lg leading-8 text-muted-foreground">
          {description}.
        </p>
        <slot name="cta">
          <div class="mt-10 flex items-center justify-center gap-x-6">
            {
              cta && Array.isArray(cta) ? (
                cta.map((c, i) => (
                  <a
                    href={c.href}
                    class:list={[
                      buttonVariants({ variant: c.variant ?? "default" }),
                    ]}
                  >
                    {c.name}
                    {i == cta.length - 1 && <span aria-hidden="true">â†’</span>}
                  </a>
                ))
              ) : (
                <a
                  href={cta.href}
                  class:list={[
                    buttonVariants({ variant: cta.variant ?? "default" }),
                  ]}``
                >
                  {cta.name}
                </a>
              )
            }
          </div>
        </slot>
      </div>
    </div>
    <slot name="hero-bg">
      <slot name="hero-bg-start">
        <div
        class:list={["absolute inset-x-0 -top-40 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80"]}
        aria-hidden="true"
        >
        {typeof bg === "object" ? 
          <div
              class:list={["relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg]  sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]",
                "bg-gradient-to-tr from-[var(--start-color)] to-[var(--end-color)] opacity-30",
              ]}
              style={style}
            >
          </div>
        : null}
        </div>
      </slot>
      <slot name="hero-bg-end">
        <div class="absolute inset-x-0 top-[calc(100%-13rem)] -z-10 transform-gpu overflow-hidden blur-3xl sm:top-[calc(100%-30rem)]" aria-hidden="true">
          <div
            class:list={["relative left-[calc(50%+3rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 sm:left-[calc(50%+36rem)] sm:w-[72.1875rem]",
              "bg-gradient-to-tr from-[var(--start-color)] to-[var(--end-color)] opacity-30"
            ]}
            style={style}
          >
          </div>
        </div>
      </slot>
    </slot>
  </div>
</section>
