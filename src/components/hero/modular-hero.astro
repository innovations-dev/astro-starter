---
import { cva, type VariantProps } from "class-variance-authority";
import { buttonVariants } from "../button/button";
import { Icon } from "astro-icon/components";
import Parallax from "../parallax.astro";
import Button from "../button/button.astro";

export interface Props extends VariantProps<typeof heroVariants> {
  title: string;
  description?: string;
  ctaText?: string;
  ctaHref?: string;
  imageSrc?: string;
  imageAlt?: string;
  gradientOverlay?: {
    startColor: string;
    endColor: string;
    opacity?: number;
  };
}

const heroVariants = cva("w-full min-h-[calc(75dvh)] flex items-center", {
  variants: {
    layout: {
      centered: "text-center justify-center",
      leftAligned: "text-left justify-start",
      rightAligned: "text-right justify-end",
    },
    imagePosition: {
      none: "",
      left: "flex-col md:flex-row",
      right: "flex-col md:flex-row-reverse",
      background: "relative bg-cover bg-center bg-no-repeat",
    },
    theme: {
      light: "bg-white text-gray-900",
      dark: "bg-gray-900 text-white",
    },
  },
  defaultVariants: {
    layout: "centered",
    imagePosition: "none",
    theme: "light",
  },
});

const {
  title,
  description,
  ctaText,
  ctaHref,
  imageSrc,
  imageAlt,
  layout = "centered",
  imagePosition = "none",
  theme = "light",
  gradientOverlay,
} = Astro.props;

const sectionStyle =
  imageSrc && imagePosition === "background"
    ? `background-image: url('${imageSrc}');`
    : "";
---

<section
  class:list={[heroVariants({ layout, imagePosition, theme })]}
  style={sectionStyle}
>
  {
    gradientOverlay && (
      <div
        class={`absolute inset-0 bg-gradient-to-br from-[${gradientOverlay.startColor}] to-[${gradientOverlay.endColor}] opacity-${gradientOverlay.opacity || 20}`}
      />
    )
  }
  <div
    class={`w-full ${imagePosition === "left" || imagePosition === "right" ? "md:w-1/2 md:px-8" : ""} ${imagePosition === "background" ? "relative z-10" : ""}`}
  >
    {
      (imagePosition === "left" || imagePosition === "right") && imageSrc && (
        <div class="w-full md:w-1/2 mb-8 md:mb-0">
          <img
            src={imageSrc}
            alt={imageAlt}
            class="w-full h-auto object-cover rounded-lg shadow-lg"
          />
        </div>
      )
    }

    <div
      class={`relative animate-out animate-slide-from-bottom timeline container mx-auto flex flex-col ${layout === "centered" ? "items-center" : layout === "leftAligned" ? "items-start" : "items-end"}`}
    >
      <Parallax speed={-2} percentage={0.4}>
        <h1
          class={`text-4xl md:text-5xl lg:text-6xl font-bold mb-4 ${layout === "centered" ? "text-center" : layout === "leftAligned" ? "text-left" : "text-right"}`}
        >
          {title}
        </h1>
      </Parallax>
      <Parallax speed={-2.5} percentage={0.4}>
        {
          description && (
            <p
              class={`text-xl md:text-2xl mb-8 ${layout === "centered" ? "text-center" : layout === "leftAligned" ? "text-left" : "text-right"}`}
            >
              {description}
            </p>
          )
        }
      </Parallax>
      <Parallax speed={-3} percentage={0.4}>
        {
          ctaText && ctaHref && (
            <a href={ctaHref} class:list={[buttonVariants({ variant: "default" }), "py-5"]}>
              {ctaText}
            </a>
          )
        }
      </Parallax>
    </div>
  </div>
</section>
