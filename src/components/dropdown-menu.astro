---
import { Icon } from "astro-icon/components";
import Kbd from "./kbd.astro";
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";

export type Props = HTMLAttributes<"div"> &
  VariantProps<typeof dropdownMenuVariants> & {
    trigger?: string;
    offset?: { x: number; y: number };
    items: {
      name: string;
      href?: string;
      onClick?: string;
      icon?: string;
      shortcut?: string[];
    }[];
  };

const {
  items,
  trigger,
  position = "bottom-right",
  variant = "default",
  offset = { x: 0, y: 0 },
  ...rest
} = Astro.props;

const dropdownMenuVariants = cva("dropdown-menu", {
  variants: {
    variant: {
      default:
        "text-sm font-medium hover:bg-accent hover:text-accent-foreground transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background border border-input h-10 py-2 px-4 rounded-md ",
      unstyled: "",
    },
    position: {
      "bottom-right": "top-full right-0",
      "bottom-left": "top-full left-0",
      "top-right": "bottom-full right-0",
      "top-left": "bottom-full left-0",
    },
  },
  defaultVariants: {
    position: "bottom-right",
  },
  compoundVariants: [
    { position: "bottom-right", class: "top-full right-0" },
    { position: "bottom-left", class: "top-full left-0" },
    { position: "top-right", class: "bottom-full right-0" },
    { position: "top-left", class: "bottom-full left-0" },
  ],
});
---

<div class="relative inline-block text-left">
  <slot name="trigger">
    <button
      type="button"
      class:list={[
        "inline-flex items-center justify-center disabled:opacity-50 disabled:pointer-events-none",
        dropdownMenuVariants({ variant }),
      ]}
      id="dropdown-trigger"
      aria-haspopup="true"
      aria-expanded="false"
      {...rest}
    >
      {trigger}
      <Icon name="lucide:chevron-down" class="ml-2 h-4 w-4" size={24} />
    </button>
  </slot>

  <div
    class:list={[
      `absolute w-72 rounded-md border border-muted bg-background shadow-md z-10 hidden`,
      dropdownMenuVariants({ position }),
    ]}
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="dropdown-trigger"
    style={`transform: translate(${offset.x}px, ${offset.y}px);`}
  >
    <div class="py-1" role="none">
      {
        items.map((item, index) =>
          item.href ? (
            <a
              href={item.href}
              class="flex items-center px-4 py-2 text-sm text-foreground hover:bg-foreground/70 hover:text-background"
              role="menuitem"
            >
              {item.icon && <Icon name={item.icon} class="mr-2 h-4 w-4" />}
              <span class="flex-grow">{item.name}</span>
              {item.shortcut && (
                <Kbd
                  class="inline ml-2 text-xs text-gray-500"
                  keys={item.shortcut}
                />
              )}
            </a>
          ) : (
            <button
              type="button"
              class="flex items-center w-full text-left px-4 py-2 text-sm text-foreground hover:bg-foreground/70 hover:text-background"
              role="menuitem"
              data-onclick={item.onClick}
              data-index={index}
            >
              {item.icon && <Icon name={item.icon} class="mr-2 h-4 w-4" />}
              <span class="flex-grow">{item.name}</span>
              {item.shortcut && (
                <Kbd
                  class="inline ml-2 text-xs text-gray-500"
                  keys={item.shortcut}
                />
              )}
            </button>
          )
        )
      }
    </div>
  </div>
</div>

<script>
  const trigger = document.getElementById("dropdown-trigger");
  const menu = trigger?.nextElementSibling;

  function toggleMenu() {
    menu?.classList.toggle("hidden");
    trigger?.setAttribute(
      "aria-expanded",
      menu?.classList.contains("hidden") ? "false" : "true"
    );
  }

  trigger?.addEventListener("click", toggleMenu);

  document.addEventListener("click", (event) => {
    if (
      !trigger?.contains(event.target as Node) &&
      !menu?.contains(event.target as Node)
    ) {
      menu?.classList.add("hidden");
      trigger?.setAttribute("aria-expanded", "false");
    }
  });

  // Handle custom onClick events
  menu?.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    const button = target.closest("button[data-onclick]");
    if (button) {
      const onClickFunction = button.getAttribute("data-onclick");
      if (onClickFunction && window[onClickFunction as keyof typeof window]) {
        (window[onClickFunction as keyof typeof window] as Function)();
      }
      toggleMenu();
    }
  });
</script>
