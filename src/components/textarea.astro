---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";

const textareaVariants = cva(
  "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "",
        error: "border-destructive"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
);

export interface TextareaProps extends HTMLAttributes<"textarea">, VariantProps<typeof textareaVariants> {
  label?: string;
  error?: string;
}

const { label, error, variant, class: className, ...props } = Astro.props;

const id = props.id || props.name || Math.random().toString(36).substring(2, 9);
---

<div class="w-full">
  {
    label && (
      <label for={id} class="mb-2 block text-sm font-medium text-foreground">
        {label}
      </label>
    )
  }
  <textarea id={id} class:list={[textareaVariants({ variant, className })]} {...props}></textarea>
  {error && <p class="mt-2 text-sm text-destructive">{error}</p>}
</div>
