---

interface CarouselItem {
  type: 'color' | 'text';
  content: string;
}

interface Props {
  items: CarouselItem[];
  className?: string;
}

const { items, className = '' } = Astro.props;

const colors = [
  'bg-red-500', 'bg-blue-500', 'bg-green-500', 'bg-yellow-500',
  'bg-purple-500', 'bg-pink-500', 'bg-indigo-500', 'bg-teal-500'
];
---

<div class={`embla relative ${className}`} id="carousel">
  <div class="embla__viewport overflow-hidden">
    <div class="embla__container flex" id="carousel-container">
      {items.map((item, index) => (
        <div class="embla__slide flex-shrink-0 w-full">
          {item.type === 'color' ? (
            <div class={`w-full h-[calc(100vh-5rem)] flex items-center justify-center ${colors[index % colors.length]}`}>
              <p class="text-4xl font-bold text-white">{item.content}</p>
            </div>
          ) : (
            <div class="h-[calc(100vh-5rem)] flex items-center justify-center  bg-gray-100 dark:bg-gray-800">
              <p class="text-2xl font-bold text-center p-4">{item.content}</p>
            </div>
          )}
        </div>
      ))}
    </div>
  </div>
  <button
    id="prev-button"
    class="absolute left-4 top-1/2 -translate-y-1/2 bg-white/80 dark:bg-gray-800/80 rounded-full p-2 text-gray-800 dark:text-gray-200 hover:bg-white dark:hover:bg-gray-800 transition-colors"
    aria-label="Previous slide"
  >
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
    </svg>
  </button>
  <button
    id="next-button"
    class="absolute right-4 top-1/2 -translate-y-1/2 bg-white/80 dark:bg-gray-800/80 rounded-full p-2 text-gray-800 dark:text-gray-200 hover:bg-white dark:hover:bg-gray-800 transition-colors"
    aria-label="Next slide"
  >
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
    </svg>
  </button>
  <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2">
    {items.map((_, index) => (
      <button
        class="w-2 h-2 rounded-full bg-white/50 dark:bg-gray-800/50 hover:bg-white dark:hover:bg-gray-800 transition-colors carousel-dot"
        aria-label={`Go to slide ${index + 1}`}
        data-index={index}
      ></button>
    ))}
  </div>
</div>

<script>
  import EmblaCarousel from 'embla-carousel';

  const initCarousel = () => {
    const carousel = document.getElementById('carousel');
    const viewport = carousel?.querySelector('.embla__viewport') as HTMLElement;
    const prevButton = carousel?.querySelector('#prev-button');
    const nextButton = carousel?.querySelector('#next-button');
    const dots = carousel?.querySelectorAll('.carousel-dot');

    if (viewport) {
      const embla = EmblaCarousel(viewport, { loop: true });

      if (prevButton) prevButton.addEventListener('click', () => embla.scrollPrev());
      if (nextButton) nextButton.addEventListener('click', () => embla.scrollNext());

      const setActiveDot = () => {
        if (!dots) return;
        const selectedIndex = embla.selectedScrollSnap();
        dots.forEach((dot, index) => {
          dot.classList.toggle('bg-white', index === selectedIndex);
          dot.classList.toggle('bg-white/50', index !== selectedIndex);
        });
      };

      dots?.forEach((dot, index) => {
        dot.addEventListener('click', () => embla.scrollTo(index));
      });

      embla.on('select', setActiveDot);
      setActiveDot(); // Set initial active dot
    }
  };


  window.addEventListener('DOMContentLoaded', initCarousel);
</script>

<style is:global>
  .embla__viewport {
    overflow: hidden;
  }
  .embla__container {
    display: flex;
  }
  .embla__slide {
    flex: 0 0 100%;
    min-width: 0;
  }
</style>