---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"div"> {
  id: string;
}

const { id, ...attrs } = Astro.props;
---

<div
  id={id}
  class="fixed inset-0 z-50 hidden bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
  data-state="closed"
  {...attrs}
>
  <div
    class="fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full"
    role="alertdialog"
  >
    <slot />
  </div>
</div>

<script define:vars={{ id }}>
  const dialog = document.getElementById(id);
  const dialogContent = dialog?.querySelector('[role="alertdialog"]');

  function toggleDialog() {
    const isOpen = dialog?.getAttribute("data-state") === "open";
    dialog?.setAttribute("data-state", isOpen ? "closed" : "open");
    dialog?.classList.toggle("hidden", isOpen);
  }

  dialog?.addEventListener("click", (event) => {
    if (event.target === dialog) {
      toggleDialog();
    }
  });

  document.addEventListener("keydown", (event) => {
    if (event.key === "Escape" && dialog?.getAttribute("data-state") === "open") {
      toggleDialog();
    }
  });

  // Expose the toggleDialog function to be used by other components
  window.toggleDialog = toggleDialog;
</script>
